#!/usr/bin/python# -*- coding: UTF-8 -*-#调用bash脚本获得afterqc的结果，并将对应的结果图片移动到指定的位置import osimport sysimport reimport operator import subprocessimport tempfile#检测文件是否存在的模块from pathlib import Pathfrom getAfterqcResult import getAfterqcResult#################################################################################class myAfterqc:	def __init__(self,layout,input_name,out_png):		#参数赋值		self.layout = layout		self.input_name = input_name		self.out_png = out_png 	#################################################	#Functions	def os_system(self,my_str):	#"函数_文档字符串"	# popen返回文件对象，跟open操作一样		f = os.popen(my_str).read()		return f	################################################	def use_afterqc(self):		try:			print('Afterqc is working')			input_name_str = self.input_name.split(',')			pattern = re.compile(r'[.\w]*.fastq|[.\w]*.fq')			result = pattern.findall(self.input_name)			input_path = input_name_str[0].replace(result[0],"")			if operator.eq(self.layout,"PE"):				self.os_system('bash my_afterqc -i '+self.input_name+' -t 2')			elif operator.eq(self.layout,"SE"):				self.os_system('bash my_afterqc -i '+self.input_name+' -t 1')			else:				print("Please input the correct self.layout!\nFor example:'SE' or 'PE'")				sys.exit()			now_path = os.path.split(os.path.realpath(__file__))[0]			dirs = os.listdir(now_path+'/QC/')			if len(dirs) == 2:				print("Afterqc has been successful.")				#"创建 Employee 类的第一个对象"				emp1 = getAfterqcResult(now_path+'/QC',now_path+"/QC/"+result[0],self.layout)				emp1.get_afterqc_result()				self.os_system('cp '+now_path+'/QC/*.png '+self.out_png)				self.os_system("rm -rf "+now_path+"/QC")			else:				print('Afterqc has been failed.')				sys.exit()		except:			print("Error,afterqc has been failed.")			sys.exit()		print('#############################################################################################')		return
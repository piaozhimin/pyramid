#!/usr/bin/python# -*- coding: UTF-8 -*-#调用fastqc获得质控结果，并将对应的结果图片移动到指定的位置import osimport sysimport reimport operator import subprocessimport tempfile#检测文件是否存在的模块from pathlib import Path#################################################################################class myFastqc:	def __init__(self,out_fastqc,out_png,layout,input_name):		#参数赋值 		self.out_png = out_png 		self.layout = layout 		self.out_fastqc = out_fastqc 		self.input_name = input_name 	#################################################	#Functions	def os_system(self,my_str):		# popen返回文件对象，跟open操作一样		f = os.popen(my_str).read()		return f	################################################	#获得读段的长度	def get_READ_ALIGNMENT_LENGTH(self):		pattern = re.compile(r'[.\w]*.fastq|[.\w]*.fq|[.\w]*.bam|[.\w]*.sam')		result0 = pattern.findall(self.input_name)		input_str = result0[0].split('.')		name = ".".join(input_str[0:len(input_str)-1])		p = self.os_system('grep -E "Sequence length" ./'+self.out_fastqc+name+'_fastqc/fastqc_data.txt')		pattern = re.compile(r'\d+')		result = pattern.findall(p)		return result[0]	################################################	def get_fastqc_result(self,my_str,num):		#判断fastqc是否成功完成		p = self.os_system(my_str)		pattern = re.compile(r'Analysis complete')		result = pattern.findall(p)		if len(result)==num>0:			print("Fastqc was completed!")		else:			print("Error,Fastqc was failed!")			sys.exit()		return	#####################################################################	#bam file to get fastq and do fastqc	def my_fastqc(self):		sample_name=""		try:			print("Checking the input file.")			if os.path.getsize(self.input_name)>1 :				print("Fastqc is working.")				#调用自编写的质控函数				#print("fastqc -o "+self.out_fastqc+" "+self.input_name)				self.get_fastqc_result("fastqc -o "+self.out_fastqc+" "+self.input_name,1)				#获得输入文件文件名称				pattern = re.compile(r'[.\w]*.bam|[.\w]*.sam')				result = pattern.findall(self.input_name)				strs = result[0].split('.')				name = ".".join(strs[0:len(strs)-1])				#解压fastqc结果文件				self.os_system('unzip '+self.out_fastqc+name+'_fastqc.zip -d '+self.out_fastqc)				#将所需的图片copy到指定的文件夹中				self.os_system('cp '+self.out_fastqc+name+'_fastqc/Images/per_base_quality.png '+self.out_png)				print('The work of Fastqc was successful')				sample_name = name			else:				print("file is empty!")				sys.exit()		except:			print("Error,the work of Fastqc was failed!")			sys.exit()		print('#############################################################################################')		return sample_name	################################################	#fastq file to do fastqc	def my_fastqc2(self):		sample_name = ''		try:			pattern = re.compile(r'[.\w]*.fastq|[.\w]*.fq')			result = pattern.findall(self.input_name)			new_input = self.input_name.replace(","," ")			if operator.eq(self.layout,"PE"):				self.input_name_str = self.input_name.split(',')				print("Checking the input file.")				if os.path.getsize(self.input_name_str[0])>1 :					if os.path.getsize(self.input_name_str[1])>1:						print("Fastqc is working.")						##调用自编写的质控函数						self.get_fastqc_result("fastqc -o "+self.out_fastqc+" "+new_input,2)						#R1端结果处理						strs = result[0].split('.')						name = ".".join(strs[0:len(strs)-1])						self.os_system('unzip '+self.out_fastqc+name+'_fastqc.zip -d '+self.out_fastqc)						#将所需的图片copy到指定的文件夹中						self.os_system('cp '+self.out_fastqc+name+'_fastqc/Images/per_base_quality.png '+self.out_png+'per_base_quality1.png')						#R2端结果处理						strs = result[1].split('.')						name1 = ".".join(strs[0:len(strs)-1])						self.os_system('unzip '+self.out_fastqc+name1+'_fastqc.zip -d '+self.out_fastqc)						#将所需的图片copy到指定的文件夹中						self.os_system('cp '+self.out_fastqc+name1+'_fastqc/Images/per_base_quality.png '+self.out_png+'per_base_quality2.png')						print('The work of Fastqc was successful')						sample_name = name					else:						print("read_2 count is zero!")						sys.exit()				else:					print("read_1 count is zero!")					sys.exit()			elif operator.eq(self.layout,"SE"):				print("Checking the input file.")				if os.path.getsize(self.input_name)>1 :					print("Fastqc is working.")					self.get_fastqc_result("fastqc -o "+self.out_fastqc+" "+self.input_name,1)					strs = result[0].split('.')					name = ".".join(strs[0:len(strs)-1])					self.os_system('unzip '+self.out_fastqc+name+'_fastqc.zip -d '+self.out_fastqc)					#将所需的图片copy到指定的文件夹中					self.os_system('cp '+self.out_fastqc+name+'_fastqc/Images/per_base_quality.png '+self.out_png)					print('The work of Fastqc was successful')					sample_name = name				else:					print("file is empty!")					sys.exit()			else:				print("Please input the correct self.layout!\nFor example:'SE' or 'PE'")				sys.exit()		except:			print("Error,the work of Fastqc was failed!")			sys.exit()		print('#############################################################################################')		return sample_name
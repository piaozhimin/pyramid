#!/usr/bin/python# -*- coding: UTF-8 -*-import osimport sysimport reimport timeimport getoptimport tempfileimport operatorimport subprocessfrom PIL import Imagefrom time import sleep#检测文件是否存在的模块from pathlib import Pathfrom myRSeQC import myRSeQCfrom myThread import myThreadfrom myThread import myThread2from myThread import myThread3from myFastqc import myFastqcfrom selenium import webdriverfrom myFaToBam import myFaToBamfrom myAfterqc import myAfterqcfrom pdf2image import convert_from_pathfrom getAfterqcResult import getAfterqcResultfrom selenium.webdriver.common.keys import KeysPYRAMID_VERSION = "0.0.1"#################################################################################def os_system(my_str):	#使语句在命令行中执行，popen返回文件对象，跟open操作一样	f = os.popen(my_str).read()	return f################################################def judge_dir(file_path):	#判断文件夹是否存在，若不存在，则新建文件夹	try:		my_file = Path(file_path)		if my_file.exists():			in_key = input("\""+file_path+"\",the folder already exists. Do you want to overwrite the files under it?[y|n]")			while in_key not in ('yes','y'):				if in_key in ('n','no'):					exit()				in_key = input('\nEnter error, please enter again![y|n]')			print('#############################################################################################')		else:			os_system('mkdir '+file_path)	except:		print('Error,folder creation failed.('+file_path+')')	return################################################def judge_bam_path(input_bam_path):	#判断用户输入的是bam相应文件是否存在	try:		my_file = Path(input_bam_path)		if my_file.exists():			path_list=os.listdir(input_bam_path)			for filename in path_list:				if filename == 'accepted_hits.bam':#有待修改					bam_name = 'accepted_hits.bam'				if filename == 'align_summary.txt':#有待修改					bam_txt = 'align_summary.txt'			if not bam_name.strip():				print("Missing bam file under specified bam path.\nPlease check!")				sys.exit()			elif not bam_txt.strip():				print("Missing alignment result file under specified bam path.\nPlease check!")				sys.exit()		else:			print('The bam file you entered does not exist in the folder.\nPlease check!')			sys.exit()	except:		print('Error,an unknown error has occurred!(judge_bam_path())')	return [bam_name,bam_txt]#################################################def get_in_key():	#获得用户的选择，是用star还是tophat    in_key = input("Please select the comparison software, tophat or star.\nT for tophat, s for star.  [t|s]")    while in_key not in ('t'):        in_key = input('\nEnter error, please enter again!\t[t|s]')    return in_key##############################################def get_pdf_Result(reports,output_file_path):	#生成最后质控结果pdf，并判断是否存在	try:		#生成结果pdf		print(reports[0])		os_system(reports[0])		print(reports[1])		os_system(reports[1])		print(reports[0])		os_system(reports[0])		print(reports[0])		os_system(reports[0])		#判断结果pdf是否有效存在		if os.path.getsize(reports[2])>1:			print("Data quality control analysis completed.")			#将结果pdf移动到用户指定的位置			os_system('mv '+reports[2]+' '+output_file_path)		else:			print("Data quality control analysis failed.")			sys.exit()	except:		print("Error,data quality control analysis failed.")		sys.exit()	return##############################################def get_pdf_tex(type_num,png_path,afqc_name,sample_name,output_file_path,txt_path):	#准备生成结果pdf的latex语句，并调用生成结果pdf的函数	print("The results report PDF file is being generated.")	now_path = os.path.split(os.path.realpath(__file__))[0]	sample_name = sample_name.replace('_',"-")	os_system('Rscript get_pdf.R '+type_num+' '+png_path+' '+afqc_name+' '+now_path+' '+sample_name+' '+txt_path)	print("get pdf!")	#分为四种类型：单端fastq输入类型，双端fastq输入类型，单端bam输入类型，双端bam输入类型。	if type_num == '1':		report_Single = ['pdflatex report_Single.tex','bibtex report_Single','report_Single.pdf']		get_pdf_Result(report_Single,output_file_path)	elif type_num == '2':		report_Paired = ['pdflatex report_Paired.tex','bibtex report_Paired','report_Paired.pdf']		get_pdf_Result(report_Paired,output_file_path)	elif type_num == '3':		report_Single_bam = ['pdflatex report_Single_bam.tex','bibtex report_Single_bam','report_Single_bam.pdf']		get_pdf_Result(report_Single_bam,output_file_path)	else:		report_Paired_bam = ['pdflatex report_Paired_bam.tex','bibtex report_Paired_bam','report_Paired_bam.pdf']		get_pdf_Result(report_Paired_bam,output_file_path)	return###############################################def bam_use_function(out_fastqc,out_png,layout,input_path,out_rseqc,output_name,species,output_file_path):	#用户输入的是bam文件时，对应的操作	#sample_name = my_fastqc(input_file,"bam")	#t_data = ['out4/out_RSeQC/tophat/', 'SRR5277235_1', '20']	threads = []	#装线程的数组	t_data = []	#装每个线程运行后的结果数据	bams = judge_bam_path(input_path)	input_name = input_path+bams[0]	emp_fastqc = myFastqc(out_fastqc,out_png,layout,input_name)	emp_RSeQC = myRSeQC(out_rseqc,out_png,layout,output_name,0,input_name,species)	thread1 = myThread3(1,"Thread-fastqc",0,[emp_fastqc,emp_RSeQC],layout)	thread1.start()	threads.append(thread1)	thread2 = myThread3(2,"Thread-RSeQC1",1,emp_RSeQC,layout)	thread2.start()	threads.append(thread2)	thread3 = myThread3(3,"Thread-RSeQC2",2,emp_RSeQC,layout)	thread3.start()	threads.append(thread3)	thread4 = myThread3(4,"Thread-RSeQC3",3,emp_RSeQC,layout)	thread4.start()	threads.append(thread4)	#等待所有线程完成	for t in threads:	    t.join()	    print(t.get_sample_name())	    t_data.extend(t.get_sample_name())	print(t_data)	print("主进程1结束！")	emp_RSeQC.my_deletion_profile()    #######################    #调用生成结果pdf的函数	if operator.eq(layout,"SE"):		get_pdf_tex('3',out_png,output_name,t_data[0],output_file_path)	elif operator.eq(layout,"PE"):		get_pdf_tex('4',out_png,output_name,t_data[0],output_file_path)	else:		print("Please input the correct self.layout!\nFor example:'SE' or 'PE'")		sys.exit()	return ###############################################def fq_use_function(out_fastqc,out_rseqc,out_png,layout,output_name,input_bam_path,input_fastq,species,index_path,output_file_path,num):	#用户输入的是fastq文件时，对应的操作	#ssample_name = my_fastqc2(input_file,layout_type)	#t_data = ['out4/out_RSeQC/tophat/', 'SRR5277235_1', '20']	threads = []	t_data = []	if num == 2:		#in_key = get_in_key()		in_key = 't'		emp_fatobam = myFaToBam(out_rseqc,input_fastq,index_path,in_key)		thread1 = myThread(1,"Thread-FaToBam",1,emp_fatobam)		thread1.start()		# 添加线程到线程列表		threads.append(thread1)	emp_fastqc = myFastqc(out_fastqc,out_png,layout,input_fastq)	# 创建新线程	thread2 = myThread(2,"Thread-fastqc",2,emp_fastqc)	thread2.start()	threads.append(thread2)	emp_afterqc = myAfterqc(layout,input_fastq,out_png)	thread3 = myThread(3,"Thread-afterqc",3,emp_afterqc)	thread3.start()	threads.append(thread3)	# 等待所有线程完成	for t in threads:	    t.join()	    print(t.get_result())	    t_data.extend(t.get_result())	print(t_data)	print("主进程1结束！")	#######################	if len(t_data) == 4:		input_bam_path = t_data[0]	new_threads = []	threads_name = ["Thread-sortBam","Thread-clipping","Thread-junction","Thread-RPKM"]	bams = judge_bam_path(input_bam_path)	input_name = input_bam_path+bams[0]	emp_RSeQC = myRSeQC(out_rseqc,out_png,layout,output_name,t_data[3],input_name,species)	for i in range(0,len(threads_name)):		new_thread = myThread2(i,threads_name[i],i,emp_RSeQC,layout)		new_thread.start()		new_threads.append(new_thread)	# 等待所有线程完成	for t in new_threads:	    t.join()	print("主进程2结束！")	#######################	#调用生成结果pdf的函数	if operator.eq(layout,"SE"):		get_pdf_tex('1',out_png,output_name,t_data[2],output_file_path,t_data[1])	elif operator.eq(layout,"PE"):		get_pdf_tex('2',out_png,output_name,t_data[2],output_file_path,t_data[1])	else:		print("Please input the correct self.layout!\nFor example:'SE' or 'PE'")		sys.exit()	return def use_help():	with open("help.txt", "r") as f:  # 打开文件		data = f.read()  # 读取文件	print(data)	return#################################################################################def main():	#需要的基本参数进行初始化	input_fastq = ""	output_file = ""	input_fastq_name = ""	input_fastq_path = ""	input_bam_name = ""	input_bam_path = ""	output_file_name = "out"	output_file_path = ""	#Mouse\Fly\Zebrafish	species_type = "Human"	layout_type = ""	species_type2 = ""	index_path = ''	#################################################################################	#获得用户命令行的输入信息	try:		options,args = getopt.getopt(sys.argv[1:],"hi:f:o:l:s:b:",["help","input=","input_Fastq=","output=","layout=","species=","input_bam_Dir=",])	except getopt.GetoptError:		print("Error. Please check that the input is correct.")		sys.exit()	###############################################	#对用户的输入信息进行识别，对对应参数进行赋值	for name,value in options:		if name in ("-h","--help"):			use_help()		if name in ("-o","--output"):			output_file_path = value			judge_dir(output_file_path)		if name in ("-l","--layout"):			layout_type = value		if name in ("-i","--input"):			input_file = value		if name in ("-s","--species"):			species_type = value		if name in ("-f","--input_Fastq"):			input_fastq = value		if name in ("-b","--input_bam_Dir"):			input_bam_path = value	################################	#判断用户是否输入了数据文件	if not input_fastq.strip():		if not input_bam_path.strip():			print("The input file is empty!\nPlease input a file of bam/fastq!")			sys.exit()		#判断用户是否输入了数据的类型	if not layout_type.strip():		print("The input species is empty!\nPlease input the type of Sequencing layout('PE' or 'SE')!")		sys.exit()	#################################	#指定对应物种的bowtie2index位置，没有对应物种则结束程序	if operator.eq(species_type,"Human"):		species_type2 = 'hg19'		index_path = '/home/igenome/hg19/Bowtie2Index/genome'	elif operator.eq(species_type,"Mouse"):		species_type2 = 'mouse'		index_path = '/home/igenome/mm9/Sequence/Bowtie2Index/genome'	elif operator.eq(species_type,"Zebrafish"):		species_type2 = '/home/igenome/zebrafish/Bowtie2Index/genome'	elif operator.eq(species_type,"Fly"):		species_type2 = '/home/igenome/fly/Bowtie2Index/genome'	else:		print("Sorry,we don't have this species information yet.")		sys.exit()	######################################	#准备输出文件夹	out_fastqc = output_file_path+'out_Fastqc/'	out_png = output_file_path+'out_picture/'	out_rseqc = output_file_path+'out_RSeQC/'	judge_dir(out_fastqc)	judge_dir(out_png)	judge_dir(out_rseqc)	##############	#更新本程序中的全局变量	output_file = output_file_path+output_file_name	#####################################	#调用程序，进行质控分析并生成结果报告	if input_fastq.strip():		if input_bam_path.strip():			fq_use_function(out_fastqc,out_rseqc,out_png,layout_type,output_file_name,input_bam_path,input_fastq,species_type2,index_path,output_file_path,1)		else:			fq_use_function(out_fastqc,out_rseqc,out_png,layout_type,output_file_name,input_bam_path,input_fastq,species_type2,index_path,output_file_path,2)	else:		bam_use_function(out_fastqc,out_png,layout_type,input_bam_path,out_rseqc,output_file_name,species_type2,output_file_path)	if __name__  == "__main__":	start_time = time.time()	print(start_time)	main()	end_time = time.time()	print(end_time,end_time-start_time)	pass